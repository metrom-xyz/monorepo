import { existsSync, writeFileSync, rmSync, readFileSync } from "node:fs";
import { dirname, join } from "node:path";
import { DEPLOYMENTS } from "../deployments";
import { fileURLToPath } from "node:url";
import { exec } from "node:child_process";
import Mustache from "mustache";

const [, , rawNetwork = "", rawPool = ""] = process.argv;
const network = rawNetwork.toLowerCase();
const pool = rawPool.toLowerCase();

const chainConfig = DEPLOYMENTS[network];
if (!chainConfig) {
    console.error(
        `"${network}" is not a valid network. Valid values are: ${Object.keys(DEPLOYMENTS).join(", ")}`,
    );
    process.exit(1);
}

const poolConfig = chainConfig.pools[pool];
if (!poolConfig) {
    console.error(
        `"${pool}" is not a valid pool. Valid values are: ${Object.keys(chainConfig).join(", ")}`,
    );
    process.exit(1);
}

console.log(
    `Generating constants.ts file for network ${network} and pool ${pool}`,
);

let constantsFile =
    '// this file is automatically generated by the prepare deploy script,\n// do not edit this manually\n\nimport { Address, BigInt } from "@graphprotocol/graph-ts";\n\n';
constantsFile += `export const NATIVE_TOKEN_ADDRESS = Address.fromString("${chainConfig.nativeToken.address}");\n`;
constantsFile += `export const NATIVE_TOKEN_SYMBOL = "${chainConfig.nativeToken.symbol}";\n`;
constantsFile += `export const NATIVE_TOKEN_NAME = "${chainConfig.nativeToken.name}";\n`;
constantsFile += `export const NATIVE_TOKEN_DECIMALS = BigInt.fromI32(${chainConfig.nativeToken.decimals});\n`;
constantsFile += `export const POOL_ADDRESS = Address.fromString("${poolConfig.Pool.address}");\n`;

try {
    const constantsFileOut = join(
        fileURLToPath(dirname(import.meta.url)),
        "../src/constants.ts",
    );
    if (existsSync(constantsFileOut)) rmSync(constantsFileOut);
    writeFileSync(constantsFileOut, constantsFile);
    console.log("Constants file successfully generated.");
} catch (error) {
    console.error("Error while generating constants file", error);
    process.exit(1);
}

console.log(`Generating subgraph file for network ${network} and pool ${pool}`);

try {
    const subgraphFileOut = join(
        fileURLToPath(dirname(import.meta.url)),
        "../subgraph.yaml",
    );
    if (existsSync(subgraphFileOut)) rmSync(subgraphFileOut);
    writeFileSync(
        subgraphFileOut,
        Mustache.render(
            readFileSync(
                join(
                    fileURLToPath(dirname(import.meta.url)),
                    "../subgraph.template.mustache",
                ),
            ).toString(),
            {
                grafting: poolConfig.grafting,
                network,
                PoolAddress: poolConfig.Pool.address,
                PoolStartBlock: poolConfig.Pool.startBlock,
                ProxyTokens: poolConfig.ProxyTokens,
            },
        ),
    );
    console.log("Subgraph file successfully generated.");
} catch (error) {
    console.error("Error while generating subgraph file", error);
    process.exit(1);
}

exec("npm format");
